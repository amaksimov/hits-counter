# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/app
    machine: true
    steps:
      - checkout

      - run:
          name: Install Docker Compose
          command: |
              curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
              chmod +x ~/docker-compose
              sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run:
          name: Build application Docker image
          command: docker-compose build

      - run:
          name: Npm Audit
          command: docker-compose run app npm audit

      - run:
          name: ESLint
          command: docker-compose run app ./node_modules/.bin/eslint .

      - run:
          name: Setup DB
          command: |
            DATABASE_URL=postgres://postgres:postgres@db:5432 docker-compose run app ./node_modules/.bin/db-migrate db:create hits-counter_test
            docker-compose run app ./node_modules/.bin/db-migrate up

      - run:
          name: Run tests
          command: docker-compose run app ./node_modules/.bin/mocha --timeout 10000
  deploy:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "hits-counter"
      - GOOGLE_PROJECT_ID: "hits-counter-226206"
      - GOOGLE_COMPUTE_ZONE: "us-central1-a"
      - GOOGLE_CLUSTER_NAME: "standard-cluster-1"
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Docker build & push
          command: |
            TAG=$(git rev-parse --short HEAD)
            docker build -t amaksimov/hits-counter:$TAG .
            IMAGE_ID=$(docker images | grep amaksimov\/hits-counter | head -n1 | awk '{print $3}')
            docker tag $IMAGE_ID eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:latest
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
            docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:latest
      - run:
          name: Deploy to Kubernetes
          command: |
            kubectl apply -f kube/jobs/migrate_db.yaml
            kubectl apply -f kube/deployments/app_deploy.yaml
            kubectl apply -f kube/services/app_svc.yaml
            kubectl rollout status deployment/${PROJECT_NAME}

workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master

